/**
 * This class  performs server queries for Photo
 *
 * @author		David Curras
 * @version		March 7, 2013
 */
var PhotoModel = function(){ };

/**
 * Saves a Photo in the server
 *
 * @param		Photo			photo
 * @param		function		uiFunction
 * @param		object			uiExtraParams
 * @static
 */
PhotoModel.Save = function(photo, uiFunction, uiExtraParams){
	var ajaxParams = {
		obj : 'photo',
		action : 'save',
		params : photo
	};
	var callbackFunction = function(data, callbackExtraParams){
			if(data){
				uiFunction(data, callbackExtraParams);
			} else {
				console.error("Unable to parse server response.PhotoModel.Save()");
			}
		};
	Ajax.Perform(ajaxParams, callbackFunction, uiExtraParams);
};

/**
 * Retrieves a Photo from the server and gives it to the callback function
 *
 * @param		int				photoId
 * @param		function		uiFunction
 * @param		object			uiExtraParams
 * @static
 */
PhotoModel.FindById = function(photoId, uiFunction, uiExtraParams){
	var ajaxParams = {
		obj : 'photo',
		action : 'FindById',
		params : photoId
	};
	var callbackFunction = function(data, callbackExtraParams){
			if(data){
				var genericObject = JSON.parse(data);
				uiFunction(new Photo(genericObject), callbackExtraParams);
			} else {
				console.error("Unable to parse server response.PhotoModel.FindById()");
			}
		};
	Ajax.Perform(ajaxParams, callbackFunction, uiExtraParams);
};

/**
 * Retrieves Photos from the server that matches the queryParams
 * filters and gives it to the callback function
 *
 * @param		object			queryParams
 * @param		function		uiFunction
 * @param		object			uiExtraParams
 * @static
 */
PhotoModel.FindBy = function(queryParams, uiFunction, uiExtraParams){
	var ajaxParams = {
		obj : 'photo',
		action : 'FindBy',
		params : queryParams
	};
	var callbackFunction = function(data, callbackExtraParams){
			if(data){
				var genericObjectsArray = JSON.parse(data);
				var photosArray = new Array();
				$.each(genericObjectsArray, function(index, genericObject){
					photosArray.push(new Photo(genericObject));
				});
				uiFunction(photosArray, callbackExtraParams);
			} else {
				console.error("Unable to parse server response.PhotoModel.FindBy()");
			}
		};
	Ajax.Perform(ajaxParams, callbackFunction, uiExtraParams);
};

/**
 * Retrieves Photos from the server that matches the queryParams
 * filters and gives it to the callback function
 *
 * @param		object			queryParams
 * @param		function		uiFunction
 * @param		object			uiExtraParams
 * @static
 */
PhotoModel.FindByMultipleValues = function(queryParams, uiFunction, uiExtraParams){
	var ajaxParams = {
		obj : 'photo',
		action : 'FindByMultipleValues',
		params : queryParams
	};
	var callbackFunction = function(data, callbackExtraParams){
			if(data){
				var genericObjectsArray = JSON.parse(data);
				var photosArray = new Array();
				$.each(genericObjectsArray, function(index, genericObject){
					photosArray.push(new Photo(genericObject));
				});
				uiFunction(photosArray, callbackExtraParams);
			} else {
				console.error("Unable to parse server response.PhotoModel.FindByMultipleValues()");
			}
		};
	Ajax.Perform(ajaxParams, callbackFunction, uiExtraParams);
};

/**
 * Retrieves all Photos from the server and gives it to the callback function
 *
 * @param		object			queryParams
 * @param		function		uiFunction
 * @param		object			uiExtraParams
 * @static
 */
PhotoModel.FetchAll = function(queryParams, uiFunction, uiExtraParams){
	var ajaxParams = {
		obj : 'photo',
		action : 'FetchAll',
		params : queryParams
	};
	var callbackFunction = function(data, callbackExtraParams){
			if(data){
				var genericObjectsArray = JSON.parse(data);
				var photosArray = new Array();
				$.each(genericObjectsArray, function(index, genericObject){
					photosArray.push(new Photo(genericObject));
				});
				uiFunction(photosArray, callbackExtraParams);
			} else {
				console.error("Unable to parse server response.PhotoModel.FetchAll()");
			}
		};
	Ajax.Perform(ajaxParams, callbackFunction, uiExtraParams);
};

/**
 * Retrieves all Photos from the server that matches
 * the searchText and gives it to the callback function
 *
 * @param		object			queryParams
 * @param		function		uiFunction
 * @param		object			uiExtraParams
 * @static
 */
PhotoModel.Search = function(queryParams, uiFunction, uiExtraParams){
	var ajaxParams = {
		obj : 'photo',
		action : 'Search',
		params : queryParams
	};
	var callbackFunction = function(data, callbackExtraParams){
			if(data){
				var genericObjectsArray = JSON.parse(data);
				var photosArray = new Array();
				$.each(genericObjectsArray, function(index, genericObject){
					photosArray.push(new Photo(genericObject));
				});
				uiFunction(photosArray, callbackExtraParams);
			} else {
				console.error("Unable to parse server response.PhotoModel.Search()");
			}
		};
	Ajax.Perform(ajaxParams, callbackFunction, uiExtraParams);
};/**
 * Retrieves the number of Photo stored in the server
 *
 * @param		object			queryParams
 * @param		function		uiFunction
 * @param		object			uiExtraParams
 * @static
 */
PhotoModel.GetCount = function(queryParams, uiFunction, uiExtraParams){
	var ajaxParams = {
		obj : 'photo',
		action : 'GetCount',
		params : queryParams
	};
	var callbackFunction = function(data, callbackExtraParams){
			if(data){
				var photoCount = parseInt(data.replace('"',''));
				uiFunction(photoCount, callbackExtraParams);
			} else {
				console.error("Unable to parse server response.PhotoModel.GetCount()");
			}
		};
	Ajax.Perform(ajaxParams, callbackFunction, uiExtraParams);
};